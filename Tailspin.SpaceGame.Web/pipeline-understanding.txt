The first task uses the DotNetCoreCLI@2 task to publish, or package, the application's build results (including its dependencies) into a folder. 
The zipAfterPublish argument specifies to add the built results to a .zip file.

The second task uses the PublishBuildArtifacts@1 task to publish the .zip file to Azure Pipelines. 
The condition argument specifies to run the task only when the previous task succeeds. 
succeeded() is the default condition, so you don't need to specify it. 
But we show it here to illustrate its use.

Declare Variables in yml file :
variables:
  buildConfiguration: "Release"
  wwwrootDir: "Tailspin.SpaceGame.Web/wwwroot"
  dotnetSdkVersion: "3.1.100"

And use it like $(dotnetSdkVersion), $(wwwrootDir), $(buildConfiguration)

"Templates combine the content of multiple YAML files into a single pipeline."
"A template enables you to define common build tasks one time and reuse those tasks multiple times."

You call a template from the parent pipeline as a build step. You can pass parameters into a template from the parent pipeline.

